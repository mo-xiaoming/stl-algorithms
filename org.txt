int main()
{
    {
        d = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        print("new sorted std::vector");
        auto i = 0;
        while (next_permutation(d.begin(), d.end())) {
            ++i;
        }
        print("next_permutation 10!-1(" + std::to_string(i) + ")times");
        prev_permutation(d.begin(), d.end());
        print("prev_permutation");

        print("is_permuation to self: "
              + std::to_string(is_permutation(d.begin(), d.end(), d.rbegin())));
    }


    {
        auto s = accumulate(d.begin() + 1, d.end(), 1, std::multiplies<>());
        print("accumulate by multiply: " + std::to_string(s));
    }

    print("reduce: not in stl");
    print("transform_reduce: not in stl");

    partial_sum(d.begin(), d.end(), d.begin());
    print("partion_sum");

    print("(transform)_(e|i)nclusive_scan: not in stl");

    {
        auto s = inner_product(d.begin(), d.end(), d.begin(), 0);
        print("inner_product: s" + std::to_string(s));
    }

    adjacent_difference(d.begin(), d.end(), d.begin());
    print("adjacent_difference");

    iota(d.begin(), d.end(), 42);
    print("iota from 42");
}
